# .github/workflows/ci-cd.yml

name: CI - Build, Push and Update All Services

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'quiz-app/**'

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_BACKEND: "iovision-repo" 
  # --- CORRECTION ---
  # Utilisez un nom de dépôt dédié pour le frontend.
  # Assurez-vous que ce dépôt "quiz-app-repo" existe bien sur ECR.
  ECR_REPOSITORY_FRONTEND: "quiz-app-repo" 

jobs:
  build-push-and-update:
    name: Build, Push and Update Manifests
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd 
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- BACKEND (ne change pas) ---
      - name: Build, tag, and push BACKEND image
        id: build-backend
        run: |
          IMAGE_TAG="backend-${{ github.sha_short }}"
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # --- FRONTEND (corrigé) ---
      - name: Build, tag, and push FRONTEND image
        id: build-frontend
        run: |
          IMAGE_TAG="frontend-${{ github.sha_short }}"
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          # La commande utilise maintenant la variable ECR_REPOSITORY_FRONTEND corrigée
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./quiz-app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # --- MISE À JOUR DES MANIFESTES (plus robuste) ---
      - name: Update manifests and push to Git
        # --- AMÉLIORATION ---
        # Cette condition garantit que l'étape ne s'exécute que si les deux builds ont réussi.
        if: ${{ success() }}
        run: |
          git config --global user.name 'wissNasri'
          git config --global user.email 'wissemnasri81@gmail.com'
          
          BACKEND_IMAGE_URI="${{ steps.build-backend.outputs.image_uri }}"
          FRONTEND_IMAGE_URI="${{ steps.build-frontend.outputs.image_uri }}"
          
          # Vérification pour s'assurer que les URIs ne sont pas vides
          if [ -z "$BACKEND_IMAGE_URI" ] || [ -z "$FRONTEND_IMAGE_URI" ]; then
            echo "Error: One of the image URIs is empty. Aborting manifest update."
            exit 1
          fi
          
          echo "Updating backend.yaml with image: $BACKEND_IMAGE_URI"
          sed -i "s|image: .*|image: $BACKEND_IMAGE_URI|" kubernetes-manifest/backend.yaml
          
          echo "Updating frontend.yaml with image: $FRONTEND_IMAGE_URI"
          sed -i "s|image: .*|image: $FRONTEND_IMAGE_URI|" kubernetes-manifest/frontend.yaml
          
          git add kubernetes-manifest/backend.yaml kubernetes-manifest/frontend.yaml
          git commit -m "ci: Update images for backend and frontend to ${{ github.sha_short }}"
          git push
