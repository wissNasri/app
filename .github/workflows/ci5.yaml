name: React.js CI/CD - Staging to Production

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'quiz-app/**'
      - 'kubernetes-manifest-staging/**' # On surveille aussi staging pour le flux
      - 'kubernetes-manifest/**'

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_BACKEND: "iovision-repo"
  ECR_REPOSITORY_FRONTEND: "quiz-app-repo"
  ECR_REPOSITORY_POPULATE: "populate-repo"


jobs:
  # ===================================================================
  # JOBS DE TESTS ET D'ANALYSE STATIQUE (INCHANGÉS)
  # ===================================================================
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./quiz-app
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository  
        uses: actions/checkout@v4
      - name: USE NODEJS ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4
      - name: Install project dependencies 
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env:
          CI: true 
      - name: Build
        run: npm run build

  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository  
        uses: actions/checkout@v4
      - name: USE NODEJS ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4
      - name: Install project dependencies 
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env:
          CI: true 



 
        
  
  # ===================================================================
  # JOB MODIFIÉ : BUILD & PUSH BACKEND + POPULATE
  # ===================================================================
  build-backend:
    name: "Build & Push: Backend " 
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    outputs:
      image_tag_backend: ${{ steps.vars-backend.outputs.image_tag }} # MODIFIÉ : Nom de l'output

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Define Backend Image Tag
        id: vars-backend 
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-8)
          IMAGE_TAG="backend-${SHA_SHORT}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build and Push Backend Image
        id: build-image-backend 
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ steps.vars-backend.outputs.image_tag }}"
          docker build -t $IMAGE_URI ./backend
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Scan BACKEND image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.build-image-backend.outputs.image_uri }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      # --- NOUVEAU : Étapes pour l'image populate ---


  build-populate:
    name: "Build & Push:  Populate" # MODIFIÉ : Titre du job
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    outputs:
      image_tag_populate: ${{ steps.vars-populate.outputs.image_tag }} # NOUVEAU : Output pour l'image populate

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Define Populate Image Tag
        id: vars-populate
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-8)
          IMAGE_TAG="populate-${SHA_SHORT}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build and Push Populate Image
        id: build-image-populate
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY_POPULATE:${{ steps.vars-populate.outputs.image_tag }}"
          docker build -t $IMAGE_URI -f ./backend/Dockerfile.populate ./backend
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Scan POPULATE image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.build-image-populate.outputs.image_uri }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # ===================================================================
  # JOB 2: BUILD & PUSH FRONTEND (INCHANGÉ)
  # ===================================================================
  build-frontend:
    name: "Build & Push: Frontend"
  
    runs-on: ubuntu-latest
    permissions: { id-token: write }
    outputs:
      image_tag: ${{ steps.vars-frontend.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: "Define Frontend Image Tag"
        id: vars-frontend
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-8)
          echo "image_tag=frontend-${SHA_SHORT}" >> $GITHUB_OUTPUT
      - name: "Build, Push & Scan Frontend for Staging"
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI="$ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ steps.vars-frontend.outputs.image_tag }}"
          
          docker build -t $IMAGE_URI ./quiz-app
          docker push $IMAGE_URI
          echo "IMAGE_URI_FOR_SCAN=$IMAGE_URI" >> $GITHUB_ENV
      - name: "Scan Image with Trivy"
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_URI_FOR_SCAN }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
  



  # ===================================================================
  # JOB 3: UPDATE MANIFESTS (MODIFIÉ)
  # ===================================================================
  # ===================================================================
  # DÉPLOIEMENT EN STAGING ET SCAN DAST
  # ===================================================================
  update-manifests-staging:
    name: "Deploy to Staging: Update Manifests"
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-populate] # Dépend toujours des builds
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Update staging manifests and push to Git
        run: |
          git config --global user.name 'wissNasri'
          git config --global user.email 'wissemnasri81@gmail.com'
          
          BACKEND_TAG=${{ needs.build-backend.outputs.image_tag_backend }}
          POPULATE_TAG=${{ needs.build-populate.outputs.image_tag_populate }}
          FRONTEND_TAG=${{ needs.build-frontend.outputs.image_tag }}
          
          # Mise à jour des manifestes dans le dossier de STAGING
          sed -i "s|\(image: .*/${{ env.ECR_REPOSITORY_BACKEND }}:\).*|\1$BACKEND_TAG|" kubernetes-manifest-staging/backend.yaml
          sed -i "s|\(image: .*/${{ env.ECR_REPOSITORY_FRONTEND }}:\).*|\1$FRONTEND_TAG|" kubernetes-manifest-staging/frontend.yaml
          sed -i "s|\(image: .*/${{ env.ECR_REPOSITORY_POPULATE }}:\).*|\1$POPULATE_TAG|" kubernetes-manifest-staging/populate-job.yaml
          
          git add kubernetes-manifest-staging/
          
          if git diff --cached --quiet; then
            echo "No changes to commit for staging."
          else
            git commit -m "ci(staging): Deploy images for commit ${{ github.sha }}"
            git push
          fi


  promote-to-production:
    name: "Promote to Production"
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-populate]
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update production manifests and push to Git
        run: |
          git config --global user.name 'GitHub Actions Promoter'
          git config --global user.email 'actions@github.com'
          
          BACKEND_TAG=${{ needs.build-backend.outputs.image_tag_backend }}
          POPULATE_TAG=${{ needs.build-populate.outputs.image_tag_populate }}
          FRONTEND_TAG=${{ needs.build-frontend.outputs.image_tag }}
          
          echo "Promoting Backend: $BACKEND_TAG, Frontend: $FRONTEND_TAG, Populate: $POPULATE_TAG to production."
          
          # --- COMMANDES SED CORRIGÉES ---
          # La syntaxe est simplifiée pour éviter les erreurs de caractères spéciaux.
          # On cherche "image: <nom_du_repo>:" et on remplace tout ce qui suit par le nouveau tag.
          sed -i "s|image: .*/${{ env.ECR_REPOSITORY_BACKEND }}:.*|image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:$BACKEND_TAG|" kubernetes-manifest/backend.yaml
          sed -i "s|image: .*/${{ env.ECR_REPOSITORY_FRONTEND }}:.*|image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:$FRONTEND_TAG|" kubernetes-manifest/frontend.yaml
          sed -i "s|image: .*/${{ env.ECR_REPOSITORY_POPULATE }}:.*|image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_POPULATE }}:$POPULATE_TAG|" kubernetes-manifest/populate-job.yaml
          
          git add kubernetes-manifest/
          
          if git diff --cached --quiet; then
            echo "No changes to commit for production."
          else
            git commit -m "ci(prod): Promote validated images to production [commit ${{ github.sha }}]"
            git push
          fi
