name: React.js CI + Semgrep

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'quiz-app/**'
      - 'kubernetes-manifest/**'

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_BACKEND: "iovision-repo"
  ECR_REPOSITORY_FRONTEND: "quiz-app-repo"
  ECR_REPOSITORY_POPULATE: "populate-repo"

jobs:
  # ... (Tous vos jobs de test et de scan restent ici, inchangés)
  frontend-test:
    # ...
  backend-test:
    # ...
  semgrep-scan-frontend:
    # ...
  # (etc...)

  # ===================================================================
  # JOBS DE BUILD DES IMAGES (INCHANGÉS)
  # ===================================================================
  build-backend:
    # ... (contenu inchangé)
    needs: [backend-test] # Mettez ici toutes vos dépendances de scan
    name: "Build & Push: Backend"
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    outputs: { image_tag: ${{ steps.vars.outputs.image_tag }} }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with: { role-to-assume: arn:aws:iam::228578233417:role/oicd, aws-region: ${{ env.AWS_REGION }} }
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Define Backend Image Tag
        id: vars
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-8)
          IMAGE_TAG="backend-${SHA_SHORT}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      - name: Build and Push Backend Image
        id: build-image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI="$ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:${{ steps.vars.outputs.image_tag }}"
          docker build -t $IMAGE_URI ./backend
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
      - name: Scan BACKEND image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with: { image-ref: ${{ steps.build-image.outputs.image_uri }}, format: 'table', exit-code: '0', ignore-unfixed: true, severity: 'CRITICAL,HIGH' }

  build-frontend:
    # ... (contenu inchangé)
    needs: [frontend-test] # Mettez ici toutes vos dépendances de scan
    name: "Build & Push: Frontend"
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    outputs: { image_tag: ${{ steps.vars.outputs.image_tag }} }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with: { role-to-assume: arn:aws:iam::228578233417:role/oicd, aws-region: ${{ env.AWS_REGION }} }
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Define Frontend Image Tag
        id: vars
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-8)
          IMAGE_TAG="frontend-${SHA_SHORT}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      - name: Build and Push Frontend Image
        id: build-image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI="$ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ steps.vars.outputs.image_tag }}"
          docker build -t $IMAGE_URI ./quiz-app
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
      - name: Scan FRONTEND image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with: { image-ref: ${{ steps.build-image.outputs.image_uri }}, format: 'table', exit-code: '0', ignore-unfixed: true, severity: 'CRITICAL,HIGH' }

  build-populate:
    # ... (contenu inchangé)
    needs: [backend-test] # Mettez ici toutes vos dépendances de scan
    name: "Build & Push: Populate"
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    outputs: { image_tag: ${{ steps.vars.outputs.image_tag }} }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with: { role-to-assume: arn:aws:iam::228578233417:role/oicd, aws-region: ${{ env.AWS_REGION }} }
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Define Populate Image Tag
        id: vars
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-8)
          IMAGE_TAG="populate-${SHA_SHORT}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      - name: Build and Push Populate Image
        id: build-image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI="$ECR_REGISTRY/${{ env.ECR_REPOSITORY_POPULATE }}:${{ steps.vars.outputs.image_tag }}"
          docker build -t $IMAGE_URI -f ./backend/Dockerfile.populate ./backend
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
      - name: Scan POPULATE image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with: { image-ref: ${{ steps.build-image.outputs.image_uri }}, format: 'table', exit-code: '0', ignore-unfixed: true, severity: 'CRITICAL,HIGH' }

  # ===================================================================
  # JOB DE DÉPLOIEMENT (CORRIGÉ)
  # ===================================================================
  update-manifests:
    name: "Deploy: Update Manifests for ArgoCD"
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-populate]
    permissions:
      contents: write
      ## CORRECTION ## : Il faut aussi la permission id-token pour se connecter à AWS
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      ## CORRECTION ## : Le bloc de connexion à AWS était manquant ici.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR (needed for registry URL)
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
        
      - name: Update manifests and push to Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          BACKEND_TAG=${{ needs.build-backend.outputs.image_tag }}
          FRONTEND_TAG=${{ needs.build-frontend.outputs.image_tag }}
          POPULATE_TAG=${{ needs.build-populate.outputs.image_tag }}
          
          if [ -z "$BACKEND_TAG" ] || [ -z "$FRONTEND_TAG" ] || [ -z "$POPULATE_TAG" ]; then
            echo "Error: Image tags from previous jobs are empty. Aborting."
            exit 1
          fi
          
          sed -i "s|image: .*/${{ env.ECR_REPOSITORY_BACKEND }}:.*|image: $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:$BACKEND_TAG|" kubernetes-manifest/backend.yaml
          sed -i "s|image: .*/${{ env.ECR_REPOSITORY_FRONTEND }}:.*|image: $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:$FRONTEND_TAG|" kubernetes-manifest/frontend.yaml
          sed -i "s|image: .*/${{ env.ECR_REPOSITORY_POPULATE }}:.*|image: $ECR_REGISTRY/${{ env.ECR_REPOSITORY_POPULATE }}:$POPULATE_TAG|" kubernetes-manifest/populate-job.yaml
          
          git add kubernetes-manifest/backend.yaml kubernetes-manifest/frontend.yaml kubernetes-manifest/populate-job.yaml
          
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
            git commit -m "ci(deploy): Update image tags to ${COMMIT_SHA}"
            git push
          fi
  # ===================================================================
  # JOB DE SCAN DES MANIFESTES KUBERNETES
  # ===================================================================
  k8s-manifest-scan:
    needs: update-manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Checkov scan (JSON report)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./kubernetes-manifest
          framework: kubernetes
          output_format: json
          output_file_path: ./checkov-report.json
          quiet: true
        continue-on-error: true
      - name: Upload Checkov JSON report
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: ./checkov-report.json
      - name: Run Kubescape scan (JSON report)
        uses: kubescape/github-action@main
        with:
          files: "kubernetes-manifest/*.yaml"
          format: json
          outputFile: ./kubescape-report.json
        continue-on-error: true
      - name: Upload Kubescape JSON report
        uses: actions/upload-artifact@v4
        with:
          name: kubescape-report
          path: ./kubescape-report.json
