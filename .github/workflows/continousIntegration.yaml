name: React.js CI + DAST + Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'quiz-app/**'
      - 'kubernetes-manifest/**'

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_BACKEND: "iovision-repo"
  ECR_REPOSITORY_FRONTEND: "quiz-app-repo"
  ECR_REPOSITORY_POPULATE: "populate-repo"

jobs:
  # ===================================================================
  # ÉTAPE 1 : TESTS DE BASE
  # ===================================================================
  frontend-test:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: ./quiz-app } }
    strategy: { matrix: { node-version: [20.x], architecture: [x64] } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: Install, Lint, Prettier, Test
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env: { CI: true }
      - name: Build
        run: npm run build

  backend-test:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: ./backend } }
    strategy: { matrix: { node-version: [20.x], architecture: [x64] } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: Install, Lint, Prettier, Test
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env: { CI: true }

  # ===================================================================
  # ÉTAPE 2 : SCANS DE SÉCURITÉ STATIQUES (SAST, SCA)
  # ===================================================================
  semgrep-scan-frontend:
    needs: frontend-test
    name: Semgrep Analysis (quiz-app)
    runs-on: ubuntu-latest
    container: { image: returntocorp/semgrep }
    defaults: { run: { working-directory: ./quiz-app } }
    steps:
      - uses: actions/checkout@v4
      - run: semgrep scan --config auto .

  gitleaks-scan-frontend:
    needs: frontend-test
    name: Gitleaks Analysis (quiz-app)
    runs-on: ubuntu-latest
    container: { image: zricethezav/gitleaks:latest }
    defaults: { run: { working-directory: ./quiz-app } }
    steps:
      - uses: actions/checkout@v4
      - run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - run: gitleaks detect --source . --no-git --verbose
        continue-on-error: true

  dependency-check-frontend:
    needs: frontend-test
    name: OWASP Dependency-Check (quiz-app)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20.x', cache: 'npm', cache-dependency-path: 'quiz-app/package-lock.json' }
      - name: Install dependencies
        working-directory: ./quiz-app
        run: npm install
      - uses: dependency-check/Dependency-Check_Action@main
        with: { project: 'quiz-app-frontend', path: './quiz-app', format: 'HTML', out: 'reports-frontend', args: '--scan . --enableExperimental' }

  semgrep-scan-backend:
    needs: backend-test
    name: Semgrep Analysis (backend)
    runs-on: ubuntu-latest
    container: { image: returntocorp/semgrep }
    defaults: { run: { working-directory: ./backend } }
    steps:
      - uses: actions/checkout@v4
      - run: semgrep scan --config auto .

  gitleaks-scan-backend:
    needs: backend-test
    name: Gitleaks Analysis (backend)
    runs-on: ubuntu-latest
    container: { image: zricethezav/gitleaks:latest }
    defaults: { run: { working-directory: ./backend } }
    steps:
      - uses: actions/checkout@v4
      - run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - run: gitleaks detect --source . --no-git --verbose
        continue-on-error: true

  dependency-check-backend:
    needs: backend-test
    name: OWASP Dependency-Check (backend)
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: ./backend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20.x', cache: 'npm', cache-dependency-path: 'backend/package-lock.json' }
      - name: Install dependencies
        run: npm install
      - uses: dependency-check/Dependency-Check_Action@main
        with: { project: 'quiz-app-backend', path: './backend', format: 'HTML', out: 'reports-backend', args: '--scan . --enableExperimental' }

  # ===================================================================
  # ÉTAPE 3 : BUILD DES IMAGES DOCKER
  # ===================================================================
  build-backend:
    name: "Build & Push: Backend"
    runs-on: ubuntu-latest
    needs: [semgrep-scan-backend, gitleaks-scan-backend, dependency-check-backend]
    permissions: { id-token: write }
    outputs:
      image_tag_backend: ${{ steps.vars-backend.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with: { role-to-assume: arn:aws:iam::228578233417:role/oicd, aws-region: ${{ env.AWS_REGION }} }
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - id: vars-backend
        run: echo "image_tag=backend-$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
      - id: build-image-backend
        run: |
          docker build -t "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ steps.vars-backend.outputs.image_tag }}" ./backend
          docker push "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ steps.vars-backend.outputs.image_tag }}"

  build-populate:
    name: "Build & Push: Populate"
    runs-on: ubuntu-latest
    needs: [semgrep-scan-backend, gitleaks-scan-backend, dependency-check-backend]
    permissions: { id-token: write }
    outputs:
      image_tag_populate: ${{ steps.vars-populate.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with: { role-to-assume: arn:aws:iam::228578233417:role/oicd, aws-region: ${{ env.AWS_REGION }} }
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - id: vars-populate
        run: echo "image_tag=populate-$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
      - id: build-image-populate
        run: |
          docker build -t "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_POPULATE }}:${{ steps.vars-populate.outputs.image_tag }}" -f ./backend/Dockerfile.populate ./backend
          docker push "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_POPULATE }}:${{ steps.vars-populate.outputs.image_tag }}"

  build-frontend:
    name: "Build & Push: Frontend"
    runs-on: ubuntu-latest
    needs: [semgrep-scan-frontend, gitleaks-scan-frontend, dependency-check-frontend]
    permissions: { id-token: write }
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with: { role-to-assume: arn:aws:iam::228578233417:role/oicd, aws-region: ${{ env.AWS_REGION }} }
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - id: vars
        run: echo "image_tag=frontend-$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
      - id: build-image
        run: |
          docker build -t "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ steps.vars.outputs.image_tag }}" ./quiz-app
          docker push "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ steps.vars.outputs.image_tag }}"

  # ===================================================================
  # ÉTAPE 4 : SCAN DE SÉCURITÉ DYNAMIQUE (DAST)
  # ===================================================================
  dast-scan:
    name: "DAST Scan with ZAP and Ngrok"
    runs-on: ubuntu-latest
    needs: [build-backend, build-populate, build-frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Build Frontend Image for DAST
        run: docker build -t local/frontend-dast:latest ./quiz-app
      - name: Replace Image Tags in Docker Compose
        run: |
          sed -i 's|BACKEND_IMAGE_TAG|${{ needs.build-backend.outputs.image_tag_backend }}|' docker-compose.dast.yml
          sed -i 's|POPULATE_IMAGE_TAG|${{ needs.build-populate.outputs.image_tag_populate }}|' docker-compose.dast.yml
      - name: Start Services
        run: docker-compose -f docker-compose.dast.yml up -d mongo backend frontend
      - name: Wait for services
        run: echo "Waiting for services..." && sleep 45
      - name: Populate Database
        run: docker-compose -f docker-compose.dast.yml run --rm populate
      - name: Setup and Expose with Ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          ngrok http 8080 --log=stdout > ngrok.log &
          sleep 10
          export NGROK_URL=$(grep -o 'url=https://[a-zA-Z0-9.-]*\.ngrok-free.app' ngrok.log | cut -d'=' -f2 )
          echo "Application is live for inspection at: $NGROK_URL"
          echo "NGROK_PUBLIC_URL=$NGROK_URL" >> $GITHUB_ENV
      - name: Run ZAP Baseline Scan (Manual Docker Install)
        run: |
          echo "Starting ZAP scan on ${{ env.NGROK_PUBLIC_URL }}"
          docker run --network="host" -v $(pwd):/zap/wrk/:rw owasp/zap2docker-stable zap-baseline.py \
            -t ${{ env.NGROK_PUBLIC_URL }} -g gen.conf -r report.html
        continue-on-error: true # Pour ne pas bloquer le pipeline au début
      - name: Stop Application Stack
        if: always()
        run: docker-compose -f docker-compose.dast.yml down

  # ===================================================================
  # ÉTAPE 5 : MISE À JOUR DES MANIFESTES POUR ARGOCD
  # ===================================================================
  update-manifests:
    name: "Deploy: Update Manifests for ArgoCD"
    runs-on: ubuntu-latest
    needs: [dast-scan]
    permissions: { contents: write }
    steps:
      - uses: actions/checkout@v4
      - name: Update manifests and push to Git
        run: |
          git config --global user.name 'wissNasri'
          git config --global user.email 'wissemnasri81@gmail.com'
          BACKEND_TAG=${{ needs.build-backend.outputs.image_tag_backend }}
          POPULATE_TAG=${{ needs.build-populate.outputs.image_tag_populate }}
          FRONTEND_TAG=${{ needs.build-frontend.outputs.image_tag }}
          if [ -z "$BACKEND_TAG" ] || [ -z "$FRONTEND_TAG" ] || [ -z "$POPULATE_TAG" ]; then
            echo "Error: Image tags from previous jobs are empty. Aborting."
            exit 1
          fi
          sed -i "s|\(image: .*iovision-repo:\).*|\1$BACKEND_TAG|" kubernetes-manifest/backend.yaml
          sed -i "s|\(image: .*quiz-app-repo:\).*|\1$FRONTEND_TAG|" kubernetes-manifest/frontend.yaml
          sed -i "s|\(image: .*populate-repo:\).*|\1$POPULATE_TAG|" kubernetes-manifest/populate-job.yaml
          git add kubernetes-manifest/backend.yaml kubernetes-manifest/frontend.yaml kubernetes-manifest/populate-job.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "ci(deploy): Update image tags to $(echo ${{ github.sha }} | cut -c1-8)"
            git push
          fi

  # ===================================================================
  # ÉTAPE 6 : SCANS DE SÉCURITÉ DES MANIFESTES
  # ===================================================================
  k8s-manifest-scan:
    needs: update-manifests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bridgecrewio/checkov-action@master
        with: { directory: ./kubernetes-manifest, framework: kubernetes, quiet: true }
        continue-on-error: true
      - uses: kubescape/github-action@main
        with: { files: "kubernetes-manifest/*.yaml" }
        continue-on-error: true

  gitleaks-scan-manifests:
    needs: update-manifests
    name: Gitleaks Analysis (kubernetes-manifest)
    runs-on: ubuntu-latest
    container: { image: zricethezav/gitleaks:latest }
    defaults: { run: { working-directory: ./kubernetes-manifest } }
    steps:
      - uses: actions/checkout@v4
      - run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - run: gitleaks detect --source . --no-git --verbose
        continue-on-error: true
