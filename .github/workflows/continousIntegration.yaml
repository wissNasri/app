name: React.js CI + Semgrep

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'quiz-app/**'
      - 'kubernetes-manifest/**'

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_BACKEND: "iovision-repo"
  ECR_REPOSITORY_FRONTEND: "quiz-app-repo"
  ECR_REPOSITORY_POPULATE: "populate-repo" # NOUVEAU : Variable pour le nouveau dépôt ECR

jobs:
  # ===================================================================
  # JOBS DE TESTS ET D'ANALYSE STATIQUE (INCHANGÉS)
  # ===================================================================
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./quiz-app
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository  
        uses: actions/checkout@v4
      - name: USE NODEJS ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4
      - name: Install project dependencies 
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env:
          CI: true 
      - name: Build
        run: npm run build

  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository  
        uses: actions/checkout@v4
      - name: USE NODEJS ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4
      - name: Install project dependencies 
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env:
          CI: true 

  semgrep-scan-frontend:
    needs: frontend-test
    name: Semgrep Analysis (quiz-app only)
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    defaults:
      run:
        working-directory: ./quiz-app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Semgrep scan (with JSON report)
        run: semgrep scan --config auto . --json --output semgrep-report-frontend.json
      - name: Upload Semgrep JSON report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-json-frontend-report
          path: ./quiz-app/semgrep-report-frontend.json

  gitleaks-scan-frontend:
    needs: frontend-test
    name: Gitleaks Analysis (quiz-app only)
    runs-on: ubuntu-latest
    container:
      image: zricethezav/gitleaks:latest
    defaults:
      run:
        working-directory: ./quiz-app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Mark GitHub workspace as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - name: Run Gitleaks scan on quiz-app
        run: gitleaks detect --source . --no-git --verbose --report-format json --report-path gitleaks-report-frontend.json
        continue-on-error: true
      - name: Upload Gitleaks JSON report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-json-frontend-report
          path: ./quiz-app/gitleaks-report-frontend.json
    
  dependency-check-frontend:
    needs: frontend-test
    name: OWASP Dependency-Check (quiz-app)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'quiz-app/package-lock.json'
      - name: Install dependencies for analysis
        working-directory: ./quiz-app
        run: npm install
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'quiz-app-frontend'
          path: './quiz-app'
          format: 'HTML'
          out: 'reports-frontend'
          args: >
            --scan .
            --enableExperimental
      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dep-check-frontend-report
          path: reports-frontend
        
  semgrep-scan-backend:
    needs: backend-test
    name: Semgrep Analysis 
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Semgrep scan 
        run: semgrep scan --config auto . --json --output semgrep-report-backend.json
      - name: Upload Semgrep JSON report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-json-report
          path: ./backend/semgrep-report-backend.json

  gitleaks-scan-backend:
    needs: backend-test
    name: Gitleaks Analysis 
    runs-on: ubuntu-latest
    container:
      image: zricethezav/gitleaks:latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Mark GitHub workspace as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - name: Run Gitleaks scan on backend
        run: gitleaks detect --source . --no-git --verbose --report-format json --report-path gitleaks-report-backend.json
        continue-on-error: true
      - name: Upload Gitleaks JSON report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-json-report
          path: ./backend/gitleaks-report-backend.json
  
  dependency-check-backend:
    needs: backend-test
    name: OWASP Dependency-Check (backend)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
      - name: Install dependencies for analysis
        working-directory: ./backend
        run: npm install
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'quiz-app-backend'
          path: './backend'
          format: 'HTML'
          out: 'reports-backend'
          args: >
            --scan .
            --enableExperimental
      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dep-check-backend-report
          path: reports-backend

  # ===================================================================
  # JOB MODIFIÉ : BUILD & PUSH BACKEND + POPULATE
  # ===================================================================
  build-backend:
    needs: [semgrep-scan-frontend,gitleaks-scan-frontend,dependency-check-frontend,semgrep-scan-backend,gitleaks-scan-backend,dependency-check-backend]
    name: "Build & Push: Backend " # MODIFIÉ : Titre du job
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    outputs:
      image_tag_backend: ${{ steps.vars-backend.outputs.image_tag }} # MODIFIÉ : Nom de l'output

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Define Backend Image Tag
        id: vars-backend # MODIFIÉ : ID de l'étape
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-8)
          IMAGE_TAG="backend-${SHA_SHORT}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build and Push Backend Image
        id: build-image-backend # MODIFIÉ : ID de l'étape
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ steps.vars-backend.outputs.image_tag }}"
          docker build -t $IMAGE_URI ./backend
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Scan BACKEND image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.build-image-backend.outputs.image_uri }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      # --- NOUVEAU : Étapes pour l'image populate ---


  build-populate:
    needs: [semgrep-scan-frontend,gitleaks-scan-frontend,dependency-check-frontend,semgrep-scan-backend,gitleaks-scan-backend,dependency-check-backend]
    name: "Build & Push:  Populate" # MODIFIÉ : Titre du job
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    outputs:
      image_tag_populate: ${{ steps.vars-populate.outputs.image_tag }} # NOUVEAU : Output pour l'image populate

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Define Populate Image Tag
        id: vars-populate
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-8)
          IMAGE_TAG="populate-${SHA_SHORT}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build and Push Populate Image
        id: build-image-populate
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY_POPULATE:${{ steps.vars-populate.outputs.image_tag }}"
          docker build -t $IMAGE_URI -f ./backend/Dockerfile.populate ./backend
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Scan POPULATE image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.build-image-populate.outputs.image_uri }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # ===================================================================
  # JOB 2: BUILD & PUSH FRONTEND (INCHANGÉ)
  # ===================================================================
  build-frontend: 
    needs: [semgrep-scan-frontend,gitleaks-scan-frontend,dependency-check-frontend,semgrep-scan-backend,gitleaks-scan-backend,dependency-check-backend]
    name: "Build & Push: Frontend"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Define Frontend Image Tag
        id: vars
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-8)
          IMAGE_TAG="frontend-${SHA_SHORT}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      - name: Build and Push Frontend Image
        id: build-image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ steps.vars.outputs.image_tag }}"
          docker build -t $IMAGE_URI ./quiz-app
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
      - name: Scan FRONTEND image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.build-image.outputs.image_uri }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'



    # ===================================================================
  # NOUVEAU JOB AJOUTÉ : DAST SCAN
  # ===================================================================
  dast-scan:
    name: "DAST Scan with ZAP and Ngrok"
    runs-on: ubuntu-latest
    needs: [build-backend, build-populate, build-frontend]
    
    # AJOUT : Permissions nécessaires pour l'authentification AWS OIDC
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ===================================================================
      # AJOUT : ÉTAPES D'AUTHENTIFICATION AUPRÈS D'AWS ET ECR
      # ===================================================================
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      # ===================================================================

      - name: Build Frontend Image for DAST
        run: docker build -t local/frontend-dast:latest ./quiz-app

      - name: Replace Image Tags in Docker Compose
        run: |
          sed -i 's|BACKEND_IMAGE_TAG|${{ needs.build-backend.outputs.image_tag_backend }}|' docker-compose.dast.yml
          sed -i 's|POPULATE_IMAGE_TAG|${{ needs.build-populate.outputs.image_tag_populate }}|' docker-compose.dast.yml

      - name: Start Services
        run: docker compose -f docker-compose.dast.yml up -d mongo backend frontend

      - name: Wait for services
        run: echo "Waiting for services..." && sleep 45

      - name: Populate Database
        run: docker compose -f docker-compose.dast.yml run --rm populate

      - name: Setup and Expose with Ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_AUTHTOKEN }}
          ngrok http 8080 --log=stdout > ngrok.log &
          sleep 10
          export NGROK_URL=$(grep -o 'url=https://[a-zA-Z0-9.-]*\.ngrok-free.app' ngrok.log | cut -d'=' -f2 )
          echo "Application is live for inspection at: $NGROK_URL"
          echo "NGROK_PUBLIC_URL=$NGROK_URL" >> $GITHUB_ENV

      - name: Run ZAP Baseline Scan (Manual Docker Install)
        run: |
          echo "Starting ZAP scan on ${{ env.NGROK_PUBLIC_URL }}"
          docker run --network="host" -v $(pwd):/zap/wrk/:rw owasp/zap2docker-stable zap-baseline.py \
            -t ${{ env.NGROK_PUBLIC_URL }} -g gen.conf -r report.html
        continue-on-error: true

      - name: Stop Application Stack
        if: always()
        run: docker compose -f docker-compose.dast.yml down

  # ===================================================================
  # JOB 3: UPDATE MANIFESTS (MODIFIÉ)
  # ===================================================================
  update-manifests:
    name: "Deploy: Update Manifests for ArgoCD"
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend,build-populate]
    permissions:
      contents: write
    steps:
      - name: "Checkout repository to access files"
        uses: actions/checkout@v4
      - name: Update manifests and push to Git
        run: |
          git config --global user.name 'wissNasri'
          git config --global user.email 'wissemnasri81@gmail.com'
          
          # MODIFIÉ : Récupération des 3 tags d'image
          BACKEND_TAG=${{ needs.build-backend.outputs.image_tag_backend }}
          POPULATE_TAG=${{ needs.build-populate.outputs.image_tag_populate }}
          FRONTEND_TAG=${{ needs.build-frontend.outputs.image_tag }}
          
          if [ -z "$BACKEND_TAG" ] || [ -z "$FRONTEND_TAG" ] || [ -z "$POPULATE_TAG" ]; then
            echo "Error: Image tags from previous jobs are empty. Aborting."
            exit 1
          fi
          
          # MODIFIÉ : Mise à jour des 3 fichiers manifestes
          sed -i "s|\(image: .*iovision-repo:\).*|\1$BACKEND_TAG|" kubernetes-manifest/backend.yaml
          sed -i "s|\(image: .*quiz-app-repo:\).*|\1$FRONTEND_TAG|" kubernetes-manifest/frontend.yaml
          sed -i "s|\(image: .*populate-repo:\).*|\1$POPULATE_TAG|" kubernetes-manifest/populate-job.yaml
          
          git add kubernetes-manifest/backend.yaml kubernetes-manifest/frontend.yaml kubernetes-manifest/populate-job.yaml
          
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
            git commit -m "ci(deploy): Update image tags to ${COMMIT_SHA}"
            git push
          fi

  # ===================================================================
  # JOB 4: K8S MANIFEST SCAN (MODIFIÉ)
  # ===================================================================
  k8s-manifest-scan:
    needs: update-manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Checkov scan (JSON report)
        uses: bridgecrewio/checkov-action@master   
        with:
          directory: ./kubernetes-manifest
          framework: kubernetes
          output_format: json
          output_file_path: ./checkov-report.json
          quiet: true
        continue-on-error: true
      - name: Upload Checkov JSON report
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: ./checkov-report.json
      - name: Run Kubescape scan (JSON report)
        uses: kubescape/github-action@main   
        with:
          files: "kubernetes-manifest/*.yaml"
          format: json
          outputFile: ./kubescape-report.json
        continue-on-error: true
      - name: Upload Kubescape JSON report
        uses: actions/upload-artifact@v4
        with:
          name: kubescape-report
          path: ./kubescape-report.json

  # ===================================================================
  # NOUVEAU JOB : GITLEAKS SCAN POUR LES MANIFESTES
  # ===================================================================
  gitleaks-scan-manifests:
    needs: update-manifests
    name: Gitleaks Analysis (kubernetes-manifest)
    runs-on: ubuntu-latest
    container:
      image: zricethezav/gitleaks:latest
    defaults:
      run:
        working-directory: ./kubernetes-manifest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Mark GitHub workspace as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - name: Run Gitleaks scan on kubernetes-manifest
        run: gitleaks detect --source . --no-git --verbose --report-format json --report-path gitleaks-report-manifests.json
        continue-on-error: true
      - name: Upload Gitleaks JSON report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-json-manifests-report
          path: ./kubernetes-manifest/gitleaks-report-manifests.json
