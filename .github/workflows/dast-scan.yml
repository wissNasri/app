name: "Analyse DAST Approfondie (Full Scan)"

on:
  workflow_dispatch:
    inputs:
      backend_image_tag:
        description: 'Tag de l''image backend (ex: backend-de6efe22)'
        required: true
        default: 'backend-de6efe22'
      frontend_image_tag:
        description: 'Tag de l''image frontend (ex: frontend-de6efe22)'
        required: true
        default: 'frontend-de6efe22'

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_BACKEND: "iovision-repo"
  ECR_REPOSITORY_FRONTEND: "quiz-app-repo"

jobs:
  run-full-dast-analysis:
    name: "Lancer le Scan DAST Approfondi"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4

      - name: "Configurer les informations d'identification AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd
          aws-region: ${{ env.AWS_REGION }}

      - name: "Connexion à AWS ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- ÉTAPE CORRIGÉE ---
      - name: "Démarrer l'environnement de test avec Docker Compose"
        # On définit les variables directement dans le bloc 'env' de l'étape.
        # Elles seront ainsi disponibles pour la commande 'docker compose'.
        env:
          BACKEND_IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.event.inputs.backend_image_tag }}
          FRONTEND_IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.event.inputs.frontend_image_tag }}
        run: |
          echo "Utilisation de l'image backend: $BACKEND_IMAGE_URI"
          echo "Utilisation de l'image frontend: $FRONTEND_IMAGE_URI"
          
          echo "Démarrage de l'environnement..."
          # La commande 'docker compose' peut maintenant lire les variables d'environnement.
          docker compose -f docker-compose.dast.yml up -d

      - name: "Attendre que l'application soit prête"
        run: |
          echo "Attente de la disponibilité du frontend sur http://localhost:8080..."
          timeout 120s bash -c 'until curl -s --head --fail http://localhost:8080 > /dev/null; do echo "En attente..."; sleep 5; done'
          echo "Application prête !"

      - name: "Lancer le Scan DAST Approfondi (Full Scan )"
        uses: zaproxy/action-full-scan@v0.11.0
        with:
          target: "http://localhost:8080/"
          allow_issue_writing: false
          cmd_options: >-
            -m 2
            -l HIGH

      - name: "Arrêter l'environnement de test"
        if: always( )
        # L'étape de nettoyage n'a pas besoin des variables, car elle ne fait que
        # lire le fichier docker-compose.yml et arrêter les services qu'il a créés.
        run: |
          echo "Affichage des logs des conteneurs avant l'arrêt..."
          docker compose -f docker-compose.dast.yml logs
          echo "Arrêt de l'environnement Docker Compose..."
          docker compose -f docker-compose.dast.yml down
