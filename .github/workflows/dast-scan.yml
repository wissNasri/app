name: "Analyse DAST avec Rapport JSON"

on:
  workflow_dispatch:
    inputs:
      backend_image_tag:
        description: 'Tag de l''image backend (ex: backend-de6efe22)'
        required: true
        default: 'backend-de6efe22'
      frontend_image_tag:
        description: 'Tag de l''image frontend (ex: frontend-de6efe22)'
        required: true
        default: 'frontend-de6efe22'

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_BACKEND: "iovision-repo"
  ECR_REPOSITORY_FRONTEND: "quiz-app-repo"
  ZAP_IMAGE: "ghcr.io/zaproxy/zaproxy:stable"

jobs:
  run-dast-analysis:
    name: "Lancer le Scan DAST et Uploader le Rapport JSON"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4

      - name: "Configurer les informations d'identification AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::228578233417:role/oicd
          aws-region: ${{ env.AWS_REGION }}

      - name: "Connexion à AWS ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Démarrer l'environnement de test"
        env:
          BACKEND_IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.event.inputs.backend_image_tag }}
          FRONTEND_IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.event.inputs.frontend_image_tag }}
        run: |
          docker compose -f docker-compose.dast.yml up -d

      - name: "Attendre que l'application soit prête"
        run: |
          echo "Attente de la disponibilité du frontend sur http://localhost:8080..."
          timeout 120s bash -c 'until curl -s --head --fail http://localhost:8080 > /dev/null; do echo "En attente..."; sleep 5; done'
          echo "Application prête !"

      # --- ÉTAPE 1 : LANCER LE SCAN ET GÉNÉRER LES RAPPORTS ---
      - name: "Lancer le Scan DAST via Docker"
        run: |
          # On crée un répertoire pour recevoir les rapports
          mkdir -p zap-reports
          
          # On exécute la commande docker run avec toutes les options nécessaires
          docker run \
            --network=host \
            -v $(pwd )/zap-reports:/zap/wrk/:rw \
            -u $(id -u):$(id -g) \
            -e "HOME=/zap/wrk/" \
            ${{ env.ZAP_IMAGE }} \
            zap-full-scan.py \
              -t http://localhost:8080/ \
              -m 2 \
              -l WARN \
              -J report_json.json || true

      # --- ÉTAPE 2 : UPLOADER UNIQUEMENT LE RAPPORT JSON ---
      - name: "Sauvegarder le rapport ZAP JSON"
        uses: actions/upload-artifact@v4
        # S'exécute toujours pour garantir que le rapport est disponible même si le scan échoue
        if: always( )
        with:
          # Nom de l'artefact qui sera visible sur la page du workflow
          name: rapport-dast-json
          # Chemin exact du fichier JSON à uploader
          path: zap-reports/report_json.json
          retention-days: 7

      - name: "Arrêter l'environnement de test"
        if: always()
        env:
          BACKEND_IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.event.inputs.backend_image_tag }}
          FRONTEND_IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.event.inputs.frontend_image_tag }}
        run: |
          echo "Arrêt de l'environnement Docker Compose..."
          docker compose -f docker-compose.dast.yml down
