# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: 'SCA - Analyse Dépendances Frontend (quiz-app)'

# Déclencheurs du workflow
on:
  push:
    branches: [ main ] # Se déclenche sur un push sur la branche main
    paths:
      - 'quiz-app/**' # IMPORTANT: Ne se déclenche QUE si des fichiers dans quiz-app sont modifiés
  workflow_dispatch: # Permet de lancer le workflow manuellement depuis l'interface GitHub

# Définition des jobs (tâches) à exécuter
jobs:
  frontend-dependency-check:
    # Le nom du job qui sera affiché
    name: 'Scan SCA sur quiz-app'
    # Le type de machine virtuelle sur laquelle le job va s'exécuter
    runs-on: ubuntu-latest

    # Les étapes du job
    steps:
      # Étape 1: Récupérer le code source de votre dépôt
      - name: 'Checkout du code source'
        uses: actions/checkout@v4

      # Étape 2: Configurer l'environnement Node.js
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Assurez-vous que c'est la bonne version pour votre projet

      # Étape 3: Installer les dépendances du Frontend (quiz-app)
      - name: 'Installer les dépendances de quiz-app'
        run: npm ci
        working-directory: ./quiz-app # On spécifie le bon dossier !

      # Étape 4: Exécuter OWASP Dependency-Check
      - name: 'Exécuter OWASP Dependency-Check'
        uses: dependency-check/Dependency-Check_Action@main
        with:
          # Nom du projet qui apparaîtra dans le rapport
          project: 'quiz-app-frontend'
          # Chemin où scanner les dépendances. On cible précisément le dossier du frontend.
          path: './quiz-app'
          # Format du rapport généré
          format: 'HTML,JUNIT'
          # Arguments supplémentaires pour la sécurité et la configuration
          args: >
            --enableExperimental
            --failOnCVSS 7
            --out ./reports
            # --failOnCVSS 7 : Fait échouer la pipeline si une vulnérabilité avec un score CVSS de 7 ou plus est trouvée.
            # --out ./reports : Spécifie le dossier de sortie pour les rapports.

      # Étape 5: Uploader les rapports de scan en tant qu'artefacts
      # S'exécute toujours pour que vous ayez accès au rapport même en cas d'échec du scan.
      - name: 'Uploader le rapport Dependency-Check'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'Rapport-SCA-Frontend'
          path: ./reports # Le dossier contenant les rapports

