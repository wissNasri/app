name: Comprehensive and Optimized CI Pipeline

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  # ===================================================================
  # ==                  ÉTAPE 1: TESTS FONCTIONNELS                  ==
  # ===================================================================
  frontend-test:
    name: 1. Frontend - Test & Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies, lint, and test
        working-directory: ./quiz-app
        run: |
          npm ci
          npm run lint
          npm test
      - name: Build application
        working-directory: ./quiz-app
        run: npm run build

  backend-test:
    name: 1. Backend - Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies, lint, and test
        working-directory: ./backend
        run: |
          npm ci
          npm run lint
          npm test

  # ===================================================================
  # ==               ÉTAPE 2: SCANS DE SÉCURITÉ DU CODE              ==
  # ===================================================================
  security-scan:
    name: 2. Security - Code & Dependency Scans
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks Manually
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.2_linux_x64.tar.gz
          chmod +x gitleaks
          ./gitleaks detect --verbose --source="." --exit-code 0 --report-format sarif --report-path "gitleaks-report.sarif"

      - name: Run Semgrep Manually
        run: |
          pip install semgrep
          semgrep scan --config "p/default" --sarif --output "semgrep.sarif" || true

      - name: Create report directories
        run: mkdir -p backend/reports quiz-app/reports

      # ---------------- OWASP Dependency-Check officielle ----------------
      - name: OWASP Dependency-Check Backend
        uses: jeremylong/owasp-dependency-check-action@v2
        with:
          project: Backend
          scan: ./backend
          format: HTML
          out: ./backend/reports
          failOnCVSS: 10

      - name: OWASP Dependency-Check Frontend
        uses: jeremylong/owasp-dependency-check-action@v2
        with:
          project: Frontend
          scan: ./quiz-app
          format: HTML
          out: ./quiz-app/reports
          failOnCVSS: 10

      - name: Upload SARIF files to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            gitleaks-report.sarif
            semgrep.sarif

      - name: Archive OWASP HTML reports (Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-reports
          path: |
            backend/reports/
            quiz-app/reports/

  # ===================================================================
  # ==         ÉTAPE 3: BUILD & SCAN DES IMAGES DOCKER LOCALES       ==
  # ===================================================================
  frontend-image:
    name: 3. Frontend - Build & Scan Image
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      - name: Build local Docker image
        id: build-image
        run: |
          docker build -t frontend-image:local -f quiz-app/Dockerfile .
          echo "image_name=frontend-image:local" >> $GITHUB_OUTPUT
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image_name }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  backend-image:
    name: 3. Backend - Build & Scan Image
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      - name: Build local Docker image
        id: build-image
        run: |
          docker build -t backend-image:local -f backend/Dockerfile .
          echo "image_name=backend-image:local" >> $GITHUB_OUTPUT
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image_name }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-backend-results.sarif'

  # ===================================================================
  # ==        ÉTAPE 4: SCAN DE L'INFRASTRUCTURE AS CODE (IAC)        ==
  # ===================================================================
  iac-scan:
    name: 4. IaC - Scan Kubernetes & Terraform
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      - uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: all
          output_format: sarif
          output_file_path: checkov-results.sarif
          quiet: true
          soft_fail: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'checkov-results.sarif'
