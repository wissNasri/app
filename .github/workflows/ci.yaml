# Nom du workflow, clair et descriptif
name: 'Frontend CI - Build, Test & Security Scan (Marketplace Actions)'

# Déclenche la pipeline sur les push vers la branche 'main'
on:
  push:
    branches:
      - main
  # Permet aussi de le lancer manuellement depuis l'interface GitHub Actions
  workflow_dispatch:

jobs:
  # Job unique pour la CI du frontend
  frontend-ci:
    name: Frontend CI Pipeline
    # Utilise une machine virtuelle Ubuntu fournie par GitHub
    runs-on: ubuntu-latest

    # Séquence des étapes à exécuter
    steps:
      # Étape 1: Récupérer le code du dépôt
      - name: '1. Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Étape 2: Scanner les fuites de secrets avec Gitleaks
      - name: '2. Scan for Secrets with Gitleaks'
        uses: gitleaks/gitleaks-action@v2
        with:
          fail: true

      # Étape 3: Mettre en place Node.js et le cache npm
      - name: '3. Setup Node.js with npm cache'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: quiz-app/package-lock.json

      # Étape 4: Installer les dépendances et exécuter les tests de base
      - name: '4. Install Dependencies & Run Basic Checks'
        working-directory: ./quiz-app
        run: |
          npm ci
          npm run lint
          npm test
        env:
          CI: true

      # Étape 5: Scanner les vulnérabilités du code avec Semgrep (SAST)
      - name: '5. Scan Code with Semgrep (SAST)'
        uses: semgrep/semgrep-action@v2
        with:
          paths: quiz-app/

      # Étape 6: Scanner les dépendances avec OWASP Dependency-Check (SCA)
      - name: '6. Scan Dependencies with OWASP Dependency-Check (SCA)'
        uses: dependency-check/Dependency-Check_Action@v5
        with:
          project: 'quiz-app-frontend'
          path: 'quiz-app'
          fail-on-cvss: 8

      # Étape 7: Construire l'image Docker localement
      - name: '7. Build Local Docker Image'
        working-directory: ./quiz-app
        run: |
          docker build -t frontend-local-image:latest .

      # Étape 8: Scanner l'image Docker avec Trivy
      - name: '8. Scan Docker Image with Trivy'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'frontend-local-image:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Étape 9: Construire les fichiers de production de l'application
      - name: '9. Build Production Assets'
        working-directory: ./quiz-app
        run: npm run build
