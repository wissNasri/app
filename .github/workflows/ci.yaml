# Nom du workflow, clair et descriptif
name: 'Frontend CI - Build, Test & Security Scan'

on:
  # Déclencher la pipeline sur les pull requests qui ciblent la branche master
  pull_request:
    branches:
      - main
  # Permet aussi de le lancer manuellement depuis l'interface GitHub Actions
  workflow_dispatch:

jobs:
  # Nom du job unique pour le frontend
  frontend-ci:
    name: Frontend CI Pipeline
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupérer le code du dépôt
      - name: '1. Checkout Code'
        uses: actions/checkout@v4
        # Nécessaire pour que Gitleaks puisse scanner l'historique des commits
        with:
          fetch-depth: 0

      # Étape 2: Scanner les fuites de secrets avec Gitleaks
      - name: '2. Scan for Secrets with Gitleaks'
        uses: gitleaks/gitleaks-action@v2
        with:
          # Fait échouer le job si des secrets sont trouvés
          fail: true

      # Étape 3: Mettre en place Node.js pour construire l'application React
      - name: '3. Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Utilise la version de Node.js spécifiée

      # Étape 4: Installer les dépendances et exécuter les tests de base
      - name: '4. Install Dependencies & Run Basic Checks'
        # Spécifie le répertoire de travail pour toutes les commandes de cette étape
        working-directory: ./quiz-app
        run: |
          echo "--- Installing Dependencies ---"
          npm ci
          echo "--- Running Linter ---"
          npm run lint
          echo "--- Running Tests ---"
          npm test
        env:
          CI: true

      # Étape 5: Scanner les vulnérabilités du code avec Semgrep (SAST)
      - name: '5. Scan Code with Semgrep (SAST)'
        uses: semgrep/semgrep-action@v2
        with:
          # Scanne uniquement le répertoire du frontend
          paths: quiz-app/

      # Étape 6: Scanner les dépendances avec OWASP Dependency-Check (SCA)
      - name: '6. Scan Dependencies with OWASP Dependency-Check (SCA)'
        uses: dependency-check/Dependency-Check_Action@v5
        with:
          # Scanne le projet qui se trouve dans le répertoire 'quiz-app'
          project: 'quiz-app-frontend'
          path: 'quiz-app'
          format: 'HTML'
          # Fait échouer le job si des vulnérabilités ÉLEVÉES ou CRITIQUES sont trouvées
          fail-on-cvss: 8

      # Étape 7: Construire l'image Docker localement (sans la pousser)
      - name: '7. Build Local Docker Image'
        working-directory: ./quiz-app
        run: |
          # Construit l'image et la tague localement. Elle n'est pas envoyée à un registre.
          docker build -t frontend-local-image:latest .

      # Étape 8: Scanner l'image Docker avec Trivy
      - name: '8. Scan Docker Image with Trivy'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'frontend-local-image:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Étape 9: Construire l'application pour vérifier que le build passe
      # Cette étape est un peu redondante si le Dockerfile fait déjà un `npm run build`,
      # mais elle peut être utile pour s'assurer que les artefacts de build peuvent être générés.
      - name: '9. Build Production Assets'
        working-directory: ./quiz-app
        run: npm run build
