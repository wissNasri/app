# =================================================================
# ==         PIPELINE CI FONCTIONNELLE ET DIRECTE              ==
# =================================================================
# Objectif : La version la plus simple et robuste qui fonctionne
# en contournant les erreurs réseau. Copiez et collez ce code.
# -----------------------------------------------------------------

name: 'Functional CI Pipeline'

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  ci-pipeline:
    name: 'Build, Test and Security Scan'
    runs-on: ubuntu-latest

    steps:
      # --- 1. Préparation ---
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup Node.js with npm cache'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: quiz-app/package-lock.json

      # --- 2. Tests de Qualité et de Fonctionnalité ---
      - name: 'Install Dependencies & Run Tests'
        working-directory: ./quiz-app
        run: |
          npm ci
          npm run lint
          npm test
        env:
          CI: true

      # --- 3. Scans de Sécurité (chaque étape est bloquante) ---
      - name: 'Scan for Secrets (Gitleaks)'
        run: |
          # Installe et exécute Gitleaks. Échoue si un secret est trouvé.
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.2_linux_x64.tar.gz
          chmod +x gitleaks
          ./gitleaks detect

      - name: 'Scan Application Code (Semgrep SAST )'
        run: |
          # Installe et exécute Semgrep. Échoue si une vulnérabilité est trouvée.
          python3 -m pip install semgrep
          semgrep scan --error ./quiz-app

      - name: 'Scan Dependencies (OWASP SCA)'
        run: |
          # Installe et exécute OWASP Dependency-Check. Échoue si une vulnérabilité de score >= 8 est trouvée.
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.2.0/dependency-check-9.2.0-release.zip
          unzip dependency-check-9.2.0-release.zip
          ./dependency-check/bin/dependency-check.sh --project "frontend" --scan "./quiz-app" --failOnCVSS 8

      # --- 4. Construction et Scan de l'Image Docker ---
      - name: 'Build Docker Image'
        working-directory: ./quiz-app
        run: |
          docker build -t frontend-local-image:latest .

      - name: 'Scan Docker Image (Trivy )'
        run: |
          # Installe et exécute Trivy. Échoue si une vulnérabilité CRITICAL ou HIGH est trouvée.
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc ) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
          trivy image --exit-code 1 --ignore-unfixed --severity CRITICAL,HIGH frontend-local-image:latest
