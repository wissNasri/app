name: Analyse de Sécurité MERN Frontend (pipeline complète avec cache)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  scan-frontend:
    name: Analyse du Frontend (React.js)
    runs-on: self-hosted

    steps:
      # ==================================================
      # 1. PRÉPARATION
      # ==================================================
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: quiz-app/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('quiz-app/package-lock.json') }}

      - name: Installer les dépendances du frontend
        run: npm install
        working-directory: quiz-app

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip

      - name: Créer le dossier de rapports
        run: mkdir -p quiz-app/reports/{trivy,owasp,gitleaks,semgrep,checkov,kubescape}

      # ==================================================
      # 2. INSTALLATION DES OUTILS AVEC CACHE
      # ==================================================

      # --- Trivy ---
      - name: Cache Trivy
        id: cache-trivy
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/trivy

          
          key: trivy-${{ runner.os }}-v0.44.0

      - name: Setup Trivy
        if: steps.cache-trivy.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.44.0/trivy_0.44.0_Linux-64bit.tar.gz
          tar zxvf trivy_0.44.0_Linux-64bit.tar.gz
          chmod +x trivy
          mv trivy /usr/local/bin/

      # --- OWASP Dependency-Check ---
      - name: Cache OWASP Dependency-Check
        id: cache-owasp
        uses: actions/cache@v3
        with:
          path: dependency-check
          key: owasp-dc-8.7.0

      - name: Setup OWASP Dependency-Check
        if: steps.cache-owasp.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.7.0/dependency-check-8.7.0-release.zip
          unzip dependency-check-8.7.0-release.zip -d dependency-check
          chmod +x dependency-check/dependency-check.sh

      # --- Gitleaks ---
      - name: Cache Gitleaks
        id: cache-gitleaks
        uses: actions/cache@v3
        with:
          path: ./gitleaks
          key: gitleaks-8.18.2

      - name: Setup Gitleaks
        if: steps.cache-gitleaks.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.2_linux_x64.tar.gz
          chmod +x gitleaks

      # ==================================================
      # 3. BUILD DOCKER
      # ==================================================
      - name: Build Docker image for frontend
        run: docker build --cache-from quiz-app-frontend:latest -t quiz-app-frontend:latest quiz-app

      # ==================================================
      # 4. ANALYSE DES VULNÉRABILITÉS
      # ==================================================

      # --- Trivy Scan console et JSON ---
      - name: Run Trivy Scan (console)
        run: trivy image --severity CRITICAL,HIGH --format table --ignore-unfixed quiz-app-frontend:latest || true

      - name: Generate Trivy JSON report
        run: trivy image --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL --format json --output quiz-app/reports/trivy/trivy-report.json --ignore-unfixed quiz-app-frontend:latest || true

      # --- Gitleaks ---
      - name: Run Gitleaks
        run: ./gitleaks detect --source="quiz-app" --report-path="quiz-app/reports/gitleaks/gitleaks-report.json" --report-format="json" --exit-code 0

      # --- Semgrep ---
      - name: Run Semgrep
        run: |
          pip install semgrep
          semgrep scan --config "p/default" --output "quiz-app/reports/semgrep/semgrep-report.json" --json || true

      # --- OWASP Dependency-Check console + JSON ---
      - name: Run OWASP Dependency-Check
        run: |
          dependency-check/dependency-check.sh \
            --project "frontend-quiz-app" \
            --scan "quiz-app" \
            --format ALL \
            --out "quiz-app/reports/owasp" \
            --enableRetired
        env:
          JAVA_HOME: /opt/jdk

      # ==================================================
      # 5. ANALYSE DES MANIFESTES KUBERNETES
      # ==================================================
      - name: Run Checkov JSON
        run: checkov -d ./kubernetes-manifest -o json > quiz-app/reports/checkov/checkov-report.json || true

      - name: Run Checkov Console
        run: checkov -d ./kubernetes-manifest
        continue-on-error: true

      - name: Run Kubescape
        uses: kubescape/github-action@main
        with:
          format: 'pretty,json'
          outputFile: 'quiz-app/reports/kubescape/kubescape-report.json'
          scanPath: ./kubernetes-manifest
        continue-on-error: true

      # ==================================================
      # 6. UPLOAD DE TOUS LES RAPPORTS
      # ==================================================
      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-frontend-report
          path: quiz-app/reports/trivy/trivy-report.json
          if-no-files-found: warn

      - name: Upload Gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-frontend-report
          path: quiz-app/reports/gitleaks/gitleaks-report.json
          if-no-files-found: warn

      - name: Upload Semgrep report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-frontend-report
          path: quiz-app/reports/semgrep/semgrep-report.json
          if-no-files-found: warn

      - name: Upload OWASP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-frontend-report
          path: quiz-app/reports/owasp/dependency-check-report.json
          if-no-files-found: warn

      - name: Upload Checkov report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-frontend-report
          path: quiz-app/reports/checkov/checkov-report.json
          if-no-files-found: warn

      - name: Upload Kubescape report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kubescape-frontend-report
          path: quiz-app/reports/kubescape/kubescape-report.json
          if-no-files-found: warn
