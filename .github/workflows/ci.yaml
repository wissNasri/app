# Nom du workflow, clair et descriptif
name: 'Frontend CI - Build, Test & Security Scan'

# Déclenche la pipeline sur les push vers la branche 'main'
on:
  push:
    branches:
      - main
  # Permet aussi de le lancer manuellement depuis l'interface GitHub Actions
  workflow_dispatch:

jobs:
  # Job unique pour la CI du frontend
  frontend-ci:
    name: Frontend CI Pipeline
    # Utilise une machine virtuelle Ubuntu fournie par GitHub
    runs-on: ubuntu-latest

    # Séquence des étapes à exécuter
    steps:
      # Étape 1: Récupérer le code du dépôt
      - name: '1. Checkout Code'
        uses: actions/checkout@v4
        with:
          # Récupère tout l'historique pour le scan Gitleaks
          fetch-depth: 0

      # Étape 2: Scanner les fuites de secrets avec Gitleaks
      - name: '2. Scan for Secrets with Gitleaks'
        uses: gitleaks/gitleaks-action@v2
        with:
          # Génère un rapport au format JSON
          report_format: json
          # Spécifie le nom du fichier de rapport
          report_path: gitleaks-report.json
          # Continue même si des secrets sont trouvés pour pouvoir publier l'artefact
          fail: false

      # Étape 2.1: Publier le rapport Gitleaks
      - name: '2.1. Upload Gitleaks Report'
        uses: actions/upload-artifact@v4
        # S'exécute toujours, même si l'étape précédente a des "erreurs" logiques
        if: always()
        with:
          name: gitleaks-report
          path: gitleaks-report.json

      # Étape 3: Mettre en place Node.js et le cache npm
      - name: '3. Setup Node.js with npm cache'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          # AMÉLIORATION : Active le cache pour les dépendances npm
          cache: 'npm'
          # Spécifie où trouver le fichier qui détermine l'état du cache
          cache-dependency-path: quiz-app/package-lock.json

      # Étape 4: Installer les dépendances et exécuter les tests de base
      - name: '4. Install Dependencies & Run Basic Checks'
        working-directory: ./quiz-app
        run: |
          echo "--- Installing Dependencies (will be fast if cached) ---"
          npm ci
          echo "--- Running Linter ---"
          npm run lint
          echo "--- Running Tests ---"
          npm test
        env:
          CI: true

      # Étape 5: Scanner les vulnérabilités du code avec Semgrep (SAST)
      - name: '5. Scan Code with Semgrep (SAST)'
        uses: semgrep/semgrep-action@v2
        with:
          # Génère un rapport au format SARIF, un standard pour les outils d'analyse
          sarif_output: semgrep.sarif
          # Cible uniquement le répertoire du frontend
          paths: quiz-app/

      # Étape 5.1: Publier le rapport Semgrep
      - name: '5.1. Upload Semgrep Report'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-report
          path: semgrep.sarif

      # Étape 6: Scanner les dépendances avec OWASP Dependency-Check (SCA)
      - name: '6. Scan Dependencies with OWASP Dependency-Check (SCA)'
        uses: dependency-check/Dependency-Check_Action@v5
        with:
          project: 'quiz-app-frontend'
          path: 'quiz-app'
          # Génère un rapport HTML, facile à lire pour un humain
          format: 'HTML'
          # Ne fait pas échouer l'étape pour garantir que le rapport est toujours uploadé
          fail-on-cvss: 0

      # Étape 6.1: Publier le rapport OWASP
      - name: '6.1. Upload OWASP Report'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-report
          # Le rapport est généré dans un répertoire temporaire par l'action
          path: ${{ runner.temp }}/dependency-check-reports/

      # Étape 7: Construire l'image Docker localement
      - name: '7. Build Local Docker Image'
        working-directory: ./quiz-app
        run: |
          docker build -t frontend-local-image:latest .

      # Étape 8: Scanner l'image Docker avec Trivy
      - name: '8. Scan Docker Image with Trivy'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'frontend-local-image:latest'
          # Génère un rapport sous forme de tableau dans les logs
          format: 'table'
          # Et un rapport JSON pour l'artefact
          output: 'trivy-results.json'
          # Fait échouer la pipeline si des vulnérabilités sont trouvées
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Étape 8.1: Publier le rapport Trivy
      - name: '8.1. Upload Trivy Report'
        uses: actions/upload-artifact@v4
        if: failure() # Ne s'exécute que si l'étape de scan Trivy a échoué
        with:
          name: trivy-report
          path: trivy-results.json

      # Étape 9: Construire les fichiers de production de l'application
      - name: '9. Build Production Assets'
        working-directory: ./quiz-app
        run: npm run build
