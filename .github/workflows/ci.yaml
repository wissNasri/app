# Nom du workflow qui illustre un cycle CI complet et autonome
name: Application CI - Full Analysis Cycle

# Déclenche ce workflow à chaque 'push' sur n'importe quelle branche.
on: [push]

jobs:
  # ==================================================================
  # JOB 1: Analyser le code source (Frontend et Backend en parallèle)
  # ==================================================================
  code-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Définit les modules à analyser.
        module: [quiz-app, backend]
    
    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4

      - name: 2. Scan for Leaked Secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        with:
          # Donne un nom de rapport unique pour chaque module pour éviter les conflits.
          report_name: gitleaks-${{ matrix.module }}

      - name: 3. Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 4. Install Dependencies & Run Tests
        run: |
          npm install
          npm run lint
          npm test
        working-directory: ./${{ matrix.module }}
        env:
          CI: true

      - name: 5. Scan Application Code with Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
        with:
          sourceRoot: ./${{ matrix.module }}

  # ==================================================================
  # JOB 2: Construire les images Docker et les scanner localement
  # ==================================================================
  build-and-scan-image:
    # Ce job ne commencera que si le job 'code-analysis' a réussi.
    needs: code-analysis
    runs-on: ubuntu-latest
    permissions:
      # Permission nécessaire pour que Trivy puisse envoyer les résultats à l'onglet "Security".
      security-events: write
    
    strategy:
      matrix:
        # Définit les images à construire.
        module: [quiz-app, backend]

    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4

      - name: 2. Build local Docker image
        id: build-image
        run: |
          # Construit l'image Docker localement et lui donne un nom unique.
          docker build -t ${{ matrix.module }}:${{ github.sha }} .
          echo "image_name=${{ matrix.module }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        working-directory: ./${{ matrix.module }}

      - name: 3. Scan local image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          # Référence à l'image que nous venons de construire localement.
          image-ref: ${{ steps.build-image.outputs.image_name }}
          format: 'sarif'
          # Donne un nom de rapport unique pour chaque image.
          output: 'trivy-${{ matrix.module }}.sarif'
          # La pipeline échouera si des vulnérabilités CRITICAL ou HIGH sont trouvées.
          severity: 'CRITICAL,HIGH'

  # ==================================================================
  # JOB 3: Scanner les manifestes IaC (Checkov & Kubescape)
  # ==================================================================
  scan-iac-and-manifests:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4

      - name: 2. Scan Kubernetes manifests with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./kubernetes-manifest
          soft_fail: true

      - name: 3. Scan Kubernetes manifests with Kubescape
        # Utilise la version 'main' comme demandé
        uses: kubescape/github-action@main
        with:
          # Format de sortie pour l'intégration avec l'onglet "Security"
          format: "sarif"
          # Nom du fichier de sortie
          outputFile: "kubescape-results.sarif"
          # Nom correct du paramètre pour spécifier le chemin à scanner
          files: "./kubernetes-manifest"
          # Nom correct du paramètre pour le seuil de blocage
          # Bloque la pipeline si le nombre de contrôles échoués est supérieur à 0.
          failedThreshold: "0"
          # Seuil de sévérité. La pipeline ne bloquera que si un contrôle de niveau 'critical' échoue.
          # Les niveaux sont : critical, high, medium, low.
          severityThreshold: "critical"

      - name: 4. Upload Kubescape results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: kubescape-results.sarif
