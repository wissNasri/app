# Nom du workflow, décrivant clairement son objectif.
name: Core Security Analysis (Secrets, SAST, SCA)

on: [push]

jobs:
  # Un seul job pour analyser le code source du frontend.
  frontend-code-security:
    name: Frontend Source Code Security
    runs-on: ubuntu-latest
    permissions:
      # Permission pour cloner le code.
      contents: read
      # Permission pour que les outils puissent uploader leurs résultats.
      security-events: write

    steps:
      # Étape 1 : Récupérer le code avec l'historique complet.
      - name: 1. Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Étape 2 : Scan de Secrets avec Gitleaks.
      - name: 2. Scan for Secrets (Gitleaks)
        uses: gitleaks/gitleaks-action@v2
        # Mode bloquant : échoue si secret trouvé.

      # Étape 3 : Scan de votre code avec Semgrep (SAST).
      - name: 3. Scan Application Code (SAST with Semgrep)
        uses: returntocorp/semgrep-action@v1

      # Étape 4 : Setup Node.js pour installer les dépendances.
      - name: 4. Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Étape 5 : Installation des dépendances (nécessaire pour OWASP DC).
      - name: 5. Install Dependencies
        run: npm install
        working-directory: ./quiz-app

      # Étape 6 : Scan des dépendances avec OWASP Dependency-Check (SCA).
      - name: 6. Scan Dependencies (SCA with OWASP DC)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'quiz-app-dependencies'
          path: './quiz-app'
          format: 'SARIF'
          out: 'reports'

      # Étape 7 : Uploader les résultats du scan de dépendances.
      - name: 7. Upload SCA Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/dependency-check-report.sarif
