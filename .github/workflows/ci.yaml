name: MERN Stack Comprehensive CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  security-events: write

jobs:

  #####################################
  # 1. FRONTEND TEST & BUILD
  #####################################
  frontend-test:
    name: 1. Frontend - Test & Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies, lint, and test
        working-directory: ./quiz-app
        run: |
          npm ci
          npm run lint
          npm test
      - name: Build frontend
        working-directory: ./quiz-app
        run: npm run build

  #####################################
  # 2. BACKEND TEST & BUILD
  #####################################
  backend-test:
    name: 2. Backend - Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies, lint, and test
        working-directory: ./backend
        run: |
          npm ci
          npm run lint
          npm test

  #####################################
  # 3. SECURITY SCAN
  #####################################
  security-scan:
    name: 3. Security - Code & Dependency Scans
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Gitleaks - secrets
      - name: Scan for leaked secrets (Gitleaks)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_EXIT_CODE: "0" # change Ã  "2" si tu veux fail le job

      # Semgrep - SAST
      - name: Static Application Security Testing (Semgrep)
        uses: returntocorp/semgrep-action@v1
        with:
          generateSarif: true

      # OWASP Dependency-Check - Backend
      - name: Dependency Vulnerability Scan - Backend
        run: |
          mkdir -p backend/reports
          docker run --rm -v $(pwd)/backend:/src owasp/dependency-check \
            --project "Backend" --scan /src --format "SARIF" --out /src/reports/dependency-check-backend.sarif
        continue-on-error: true

      # OWASP Dependency-Check - Frontend
      - name: Dependency Vulnerability Scan - Frontend
        run: |
          mkdir -p quiz-app/reports
          docker run --rm -v $(pwd)/quiz-app:/src owasp/dependency-check \
            --project "Frontend" --scan /src --format "SARIF" --out /src/reports/dependency-check-frontend.sarif
        continue-on-error: true

      # Upload SARIF
      - name: Upload SARIF files
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            gitleaks-report.sarif
            semgrep.sarif
            backend/reports/dependency-check-backend.sarif
            quiz-app/reports/dependency-check-frontend.sarif

      # Archive artefacts
      - name: Archive all security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            gitleaks-report.sarif
            semgrep.sarif
            backend/reports/
            quiz-app/reports/

  #####################################
  # 4. FRONTEND IMAGE BUILD & SCAN
  #####################################
  frontend-image:
    name: 4. Frontend - Build & Scan Image
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      - id: build-image
        run: |
          docker build -t frontend-image:local -f quiz-app/Dockerfile .
          echo "image_name=frontend-image:local" >> $GITHUB_OUTPUT
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image_name }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  #####################################
  # 5. BACKEND IMAGE BUILD & SCAN
  #####################################
  backend-image:
    name: 5. Backend - Build & Scan Image
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      - id: build-image
        run: |
          docker build -t backend-image:local -f backend/Dockerfile .
          echo "image_name=backend-image:local" >> $GITHUB_OUTPUT
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image_name }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-backend-results.sarif'

  #####################################
  # 6. IaC / MANIFEST SCAN
  #####################################
  iac-scan:
    name: 6. IaC - Scan Kubernetes & Terraform
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4

      # Checkov scan
      - uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: all
          output_format: sarif
          output_file_path: checkov-results.sarif
          quiet: true
          soft_fail: true

      # Upload SARIF
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'checkov-results.sarif'

      # Archive artefact
      - uses: actions/upload-artifact@v4
        with:
          name: iac-reports
          path: checkov-results.sarif
