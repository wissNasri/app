# Nom du fichier : .github/workflows/professional-ci-pipeline.yml

name: Professional CI Pipeline with SARIF Reporting

# Se déclenche sur les Pull Requests vers la branche master
on:
  pull_request:
    branches: [ master ]
    paths:
      - 'quiz-app/**' # Ne se déclenche que si le code du frontend change
      - '.github/workflows/professional-ci-pipeline.yml' # Se déclenche aussi si on modifie le pipeline lui-même

jobs:
  security-and-validation:
    name: "Security Validation and Build"
    runs-on: ubuntu-latest

    # --- PERMISSIONS CRUCIALES POUR LA SOLUTION SARIF ---
    permissions:
      contents: read          # Pour checkout le code
      security-events: write # Pour téléverser les rapports SARIF vers l'onglet Security

    steps:
      - name: "1. Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Nécessaire pour que Gitleaks scanne tout l'historique

      # ===================================================================
      # ÉTAPE DE SÉCURITÉ GLOBALE
      # ===================================================================
      - name: "2. Scan for Secrets with Gitleaks"
        uses: gitleaks/gitleaks-action@v2
        # Par défaut, cette action fait échouer le pipeline si des secrets sont trouvés

      - name: "3. Scan IaC with Checkov"
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./quiz-app # Scanne tout le dépôt
          # Par défaut, Checkov fait échouer le pipeline en cas de problème

      - name: "4. Scan K8s Manifests with Kubescape"
        uses: kubescape/github-action@main
        with:
          format: 'sarif' # On génère un rapport SARIF
          output: 'kubescape-results.sarif'
          # On définit des seuils de qualité stricts
          complianceThreshold: 0 # Exige un score de conformité d'au moins 80%

      - name: "5. Upload Kubescape SARIF"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'kubescape-results.sarif'

      # ===================================================================
      # ÉTAPE DE VALIDATION DU FRONTEND
      # ===================================================================
      - name: "6. Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: "7. Install Dependencies & Run Tests"
        working-directory: ./quiz-app
        run: |
          npm install
          npm run lint
          npm test

      - name: "8. Run Semgrep (SAST) and Generate SARIF"
        uses: returntocorp/semgrep-action@v1
        with:
          source-root: quiz-app/
          generate-sarif: true # Fait échouer le job si des failles sont trouvées ET génère le rapport

      - name: "9. Upload Semgrep SARIF"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: "10. Run OWASP Dependency-Check (SCA) and Generate SARIF"
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'quiz-app'
          path: 'quiz-app/'
          format: 'SARIF'
          failOnCVSS: 7 # Fait échouer le pipeline si une vulnérabilité avec un score CVSS de 7 ou plus est trouvée

      - name: "11. Upload OWASP-DC SARIF"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'quiz-app/reports/dependency-check-report.sarif'

      - name: "12. Build Docker Image"
        working-directory: ./quiz-app
        run: docker build -t frontend-test-build .

      - name: "13. Run Trivy Scan and Generate SARIF"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'frontend-test-build'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL' # Fait échouer le pipeline pour ces sévérités
